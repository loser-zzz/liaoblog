[{"date":"2023-09-05T14:02:26.840Z","url":"/liaoblog/2023/09/05/PHP/Laravel+PHPUnit%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/","categories":[["undefined",""]],"content":"Laravel+PHPUnit学习记录引言 参考资料： - Laravel教程 - 文章里面部分函数例如: visit()，see()，高版本已废弃，高版本函数请参考：Laravel文档 - PHPUnit中文网 步骤 使用的Laravel6.0进行的测试，自带PHPUnit，注意: 测试类约定成俗的放在tests目录下面，测试文件以xxxTest.php为结尾，不写的话会被忽略跳过。 测试类里面的方法，必须含有test开头，不然会忽略。 tests目录下面有几个文件，ExampleTest.php是测试类demo，TestCase.php是一个引导文件用于在我们的测试中设置 Laravel 环境。 项目的根目录下有个phpunit.xml文件，这个是测试配置文件， 元素必须拥有 name 属性，可以有一个或多个 及 子元素，分别代表需要搜索测试的目录及元素。 启动测试命令（laravel有自带的测试demo，可以执行测试一下，不能直接执行phpunit和环境变量有关系）: 启动之后会有以下结果： 4 tests ：这里指的是一共执行四个方法。（配置里的所有测试类里面的方法） 10 assertions ：这里指的是执行了10个断言结果。 OK ：达到了执行预期结果。 FAILURES ：错误结果 PHPUnit介绍完了，开始进行手动测试，创建一个测试类： 打开BasicTest.php文件： 然后执行测试命令，就直接返回测试结果。这里描述的是大概原理，不详细讲解断言的所有方法，有需要的话就去：PHPUnit中文网 实践一个测试案例，在app的目录下面创建Box.php文件（用于逻辑测试）： 然后修改刚刚用命令生成的BasicTest.php文件： 执行测试命令，等等断言结果，别光复制，上面有注释断言的含义，可以自己进行条件替换测试，一个简单类的逻辑测试就到这里了，下面来做一个简单的web页面的测试。 之前提到过的tests&#x2F;Feature&#x2F;目录下面有个测试用的demo -&gt; ExampleTest.php 打开里面有个testBasicTest方法，然后在这个基础上面修改成以下： web这里大致逻辑也在代码上注释了，请求一个地址检查输出内容是否符合自己的预期。 这里再测试一个简单json接口，首先在&#x2F;routes&#x2F;wab.php添加一个路由： 在刚刚的ExampleTest.php上面添加以下函数： 简单的接口数据测试，就是这样了，要涉及到复杂操作的话，还是要认真多看文档，多动手写测试。 "},{"date":"2023-09-05T14:02:26.834Z","url":"/liaoblog/2023/09/05/PHP/array_merge%E5%92%8Carray+array%E7%9A%84%E5%8C%BA%E5%88%AB/","categories":[["undefined",""]],"content":"array_merge和array+array的区别引言 想起最近水群，看到的一个问题，就是array_merge函数和array+array的合并方式有什么区别。 步骤 测试代码： 从以上结果得出，array_merge和array+array 在字符串的键值中，都可以合并数组，区别在于： array_merge相同字符串键名的情况下，后一个值会覆盖前一个值。 array+array相同字符串键名的情况下，会保留前一个值，放弃后一个值。 上面是键值作为字符串的数组，下面这里是用数值作为键值的数组: 6.从以上的结果得出： array_merge相同数值键名的情况下，函数将返回带有整数键名的新数组，其键名以 0 开始进行重新排序索引。 array+array相同数值键名的情况下，会保留前一个值，放弃后一个值。 总结 相同之处：可以合并数组。 不同之处: array_merge相同字符串键名的情况下，后一个值会覆盖前一个值。在数值键名的情况下，会返回一个新数组，从o开始的新索引。 array+array键名相同（字符串和数值）的情况下，会保留前一个值，放弃后一个值。 "},{"date":"2023-09-05T14:02:26.810Z","url":"/liaoblog/2023/09/05/Git/git%E7%9A%84%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/","categories":[["undefined",""]],"content":"git的自动部署引言 早些年就想用git来做一个简单的单机自动部署的，原理通过hook(钩子)操作。 步骤 创建运行项目的根目录，这个路径自己定： 进入到根目录： 克隆仓库到根目录： 设置权限： 切换到git仓库里面项目钩子配置目录里面： 生成post-receive文件： 添加以下内容： 保存，然后给这个文件添加新的权限： 注意 这个自动部署只适合单机部署，市面上已经有很多成熟的方案了，GitHub 的 WebHook，GitLab + Jenkins，Drone + Gogs，这些听说也很香。"},{"date":"2023-09-05T14:02:26.802Z","url":"/liaoblog/2023/09/05/Git/git%E5%A6%82%E4%BD%95%E6%8A%8A%E6%9C%AC%E5%9C%B0%E4%BB%A3%E7%A0%81%E4%B8%8A%E4%BC%A0%E5%88%B0Github/","categories":[["undefined",""]],"content":"git如何把本地代码上传到Github步骤 安装好Git，官网下载。 安装的话自己搜索其他教程,我这里就不描述了。 点击右键Git Gash Here 进入到当前文件夹的命令行界面。注意是当前目录，我一般都是在www目录。 把代码上传到Github 要做一些Git的配置。 首先初始化项目目录 命令行 输入： 本地Git仓库和GitHub仓库之间的传输是通过SSH加密的，所以必须先让git生成SSH-key 再让github仓库认证你SSH-key 。 命令行 输入： 上面的操作直接Enter 默认就好，然后根据上面的路径找到id_rsa.pub这个文件用编辑器打开，拿到ssh-key。注意事项：后缀是.pub。 登录你的github 去到你的设置。 设置用户名： 设置用户邮箱： 配置ok之后，查看是否配置成功： 在github 上创建库，拿到库的地址。 先设置远程代码库origin： 把库上面的克隆下来： 修改或编辑或添加文件，再add到 git &#x2F;&#x2F;添加到提交文件队列中： 真实提交到本地仓库： 代码合并提交到线上仓库： "},{"date":"2023-09-05T14:02:26.763Z","url":"/liaoblog/2023/09/05/Centos/centos7.8%E5%AE%89%E8%A3%85docker/","categories":[["undefined",""]],"content":"centos7.8安装docker引言 Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中,然后发布到任何流行的Linux机器或Windows 机器上,也可以实现虚拟化,容器是完全使用沙箱机制,相互之间不会有任何接口。–百度百科 简单来说作用，就是快速部署应用，统一运行环境，解决应用之间的隔离问题的作用，占用资源少。 步骤 Docker的三大核心概念：容器，镜像，仓库。它们之间的关系如下： Docker Web应用 容器 网站 镜像 源代码 仓库 Git仓库 准备的是centos7.8的新环境，下面进行安装： 设置好仓库： 进行默认安装： 安装完启动docker： 查看docker版本： "},{"date":"2023-09-05T14:02:26.755Z","url":"/liaoblog/2023/09/05/Centos/centos7.6%E7%9A%84ip%E6%9F%A5%E8%AF%A2%E5%92%8C%E7%BD%91%E5%8D%A1%E9%85%8D%E7%BD%AE/","categories":[["undefined",""]],"content":"centos7.6的ip查询和网卡配置步骤 在centos7中，查看ip的命令 ip addr 。 在ip addr 命令中 可以看到网卡没有激活，所以没有显示ip 。 使用命令vi &#x2F;etc&#x2F;sysconf ig&#x2F;network-scripts&#x2F;ifcfg&#x2F;ens33 编辑网卡配置。 编辑网卡会出现以下内容，红框框住的是需要编辑 的配置，ONBOOT是指明在系统启动时是否激活网卡,将no改成yes。 改成以下，:wq 保存： 保存完之后 ，执行以下命令 service network start 重启网卡。 重启网卡后 ，重新查询ip 执行命令 ip addr，下面红框中的是你的ip。 "},{"date":"2023-09-05T14:02:26.749Z","url":"/liaoblog/2023/09/05/Centos/Centos7.6%E5%AE%89%E8%A3%85oniguruma/","categories":[["undefined",""]],"content":"Centos7.6安装oniguruma引言 为啥要安装oniguruma，是因为PHP7.4.x中mbstring的正则表达式功能需要oniguruma。 步骤 执行以下代码： 根据小网站的提示，configure必须要有“–libdir&#x3D;&#x2F;lib64”这个参数，不然编译php7.4.x的时候一定会报No package ‘oniguruma’ found。当然除非你编译PHP的时候不使用mbstring的功能。 注意 找挺久的一个资料，虽然广大网友也遇到了这个问题，但是终究没有试出一个合适的方案，翻了很久终于在一个小网站里面找到了。"},{"date":"2023-09-05T14:02:26.743Z","url":"/liaoblog/2023/09/05/Centos/Centos7.6%E5%8D%87%E7%BA%A7gcc/","categories":[["undefined",""]],"content":"Centos7.6升级gcc引言 mysql8需要，升级gcc。 步骤 安装依赖： 进入源码目录： 下载源码包： 解压文件： 进入解压的文件夹： 继续安装依赖： 执行命令后它会自动下载mpfr、gmp、mpc isl这4个库。 建立一个文件夹： 进入文件夹： 配置： 编译和安装： 删除旧版本的gcc： 创建软连接： 查看版本： 就这样完成了？不，你错了，还有一个叫动态库的东西，版本更新了，但是动态库不一定更新了。是不是很惊喜（我更新完就去编译mysql了，然后炸了，丢）。 这里就不做是否动态库更新的判断了，直接就当做动态库没有更新。 查询gcc的安装路径: 进入操作目录: 复制安装好的gcc文件到操作目录: 删除旧的软连接，怕删错就拷贝一份做备份: 添加软连接: 到这一步才是安装完成。 "},{"date":"2023-09-05T14:02:26.737Z","url":"/liaoblog/2023/09/05/Centos/Centos7.6%E5%8D%87%E7%BA%A7cmake/","categories":[["undefined",""]],"content":"Centos7.6升级cmake引言 由于要手动编译mysql8，需要高版本的cmake，不得不更新cmake。 步骤 进入src目录，执行以下命令： 下载源码包： 解压源码包： 进入解压后的文件夹： 开始配置(–prefix 指定安装目录)： 配置完就开始编译安装： 如果是系统有自带的cmake，就要删除，已删除过的请忽略： 安装完创建命令的软连接： 执行版本的命令： 出现如下就是成功了： "},{"date":"2023-09-05T14:02:26.732Z","url":"/liaoblog/2023/09/05/Centos/Centos7.6%E4%B8%8B%E7%9A%84Mysql8.0.20%E7%BC%96%E8%AF%91%E9%94%99%E8%AF%AF%E5%90%88%E9%9B%86/","categories":[["undefined",""]],"content":"Centos7.6下的Mysql8.0.20编译错误合集引言 搭建mysql8.0.20遇见的问题点汇总。 步骤 错误：‘SYS_gettid’： 解决方案： 错误：‘os_compare_and_swap_thread_id’ 注意：文件名是lock0lock.cc: 解决方案： 错误：‘os_compare_and_swap_thread_id’注意：文件名是trx0trx.cc： 解决方案： "},{"date":"2023-09-05T14:02:26.725Z","url":"/liaoblog/2023/09/05/Centos/Centos7.6%E4%B8%8B%E7%9A%84LAMP%E4%B9%8BPHP%E7%BC%96%E8%AF%91/","categories":[["undefined",""]],"content":"Centos7.6下的LAMP之PHP编译步骤 安装以下的依赖： 如果要使用mbstring的功能一定要安装oniguruma，不安装oniguruma就会报No package ‘oniguruma’ found。 选用PHP 7.4.8 作为编译版本： 预编译： 编译&amp;&amp;安装： 安装完之后开始配置PHP，拷贝php配置文件(基于&#x2F;usr&#x2F;local&#x2F;src&#x2F;php-7.4.8路径)： 编辑配置文件： php-fpm.conf文件去掉前面的 ; 号： 编辑 www.conf： www.conf文件去掉前面的 ; 号： 编辑开机自启文件： php-fpm.service添加下列语句： 在命令行中运行以下命令，生成静态文件并部署到 GitHub Pages： 添加php到系统环境变量： 配置Apache解析php文件： httpd.conf修改： 到这里就配置完了，重启Apache和PHP： 注意 PHP命令： systemctl enable php-fpm.service 开机自启 systemctl disable php-fpm.service 取消开机自启 systemctl reload php-fpm.service 重新加载服务 systemctl status php-fpm.service 查看状态 systemctl start php-fpm.service 启动php服务 systemctl stop php-fpm.service 停止php服务 systemctl restart php-fpm.service 重启php服务 "},{"date":"2023-09-05T14:02:26.719Z","url":"/liaoblog/2023/09/05/Centos/Centos7.6%E4%B8%8B%E7%9A%84LAMP%E4%B9%8BMysql%E7%BC%96%E8%AF%91/","categories":[["undefined",""]],"content":"Centos7.6下的LAMP之Mysql编译引言 安装mysql8.0需要高版本的cmake和gcc，所以要手动更新这两个依赖，这两个更新的方法，我另外写了两篇文章。更新完才能执行以下的操作。注意事项：系统盘最好要大于60G。不然会安装失败。 步骤 进行安装前做些准备工作，比如源码包，依赖包，以及冲突环境，例如以下： 如果存在就要卸载了，不存在就忽略吧，原因是安装mysql的话会和mariadb的文件冲突，执行以下命令： 安装依赖，执行以下操作： 下载源码包，执行以下操作： 创建mysql用户，执行以下操作： 创建安装目录和数据目录，执行以下操作： 开始解压编译，执行以下操作： 编译安装会出现一些问题，就是一些函数不存在要求替换，问题可以参考这个文章，Centos7.6下的Mysql8.0.20编译错误合集，有些问题可以仔细看看，手动替换上面的函数，然后重新make &amp;&amp; make install 就好。 初始化mysql： 初始化完之后要记得保存mysql的临时密码。 安装ssl： 启动mysql （临时操作，需要另外开一个窗口执行）: 连接mysql： 连接成功，修改密码（我这里修改root只是为了方便，正式环境不要使用简单的密码）: 设置远程登录，为了方便mysql的管理工具连接: 设置环境变量: 设置开机自动启动: 添加以下语句: 设置开机自启: 注意 生产环境中千万不要把所有权限都分配给远程登陆用户。 Navicat工具版本在12或以下的，会连接不上，原因是mysql8.0版本的加密方式有变更，或出现Authentication plugin ‘caching_sha2_password’这样的问题，需要更改密码的加密方式，这里需要另外自行找答案了，我这里就不详细描述了。 在正式环境下请打开3306端口，由于我这里是直接关闭防火窗的Sao操作。 到这里mysql的安装结束了，这里太繁琐了，电脑不好完全跑不动，网速不好的情况下建议那些大的包从迅雷去下载然后传到虚拟机会快很多。 mysql命令 systemctl start mysql 启动mysql服务 systemctl restart mysql 重启mysql服务 systemctl status mysql 查询mysql状态 "},{"date":"2023-09-05T14:02:26.712Z","url":"/liaoblog/2023/09/05/Centos/Centos7.6%E4%B8%8B%E7%9A%84LAMP%E4%B9%8BApache%E7%BC%96%E8%AF%91/","categories":[["undefined",""]],"content":"Centos7.6下的LAMP之Apache编译引言 平时都是使用集成环境开发，增加开发效率，一时心血来潮决定自己手动编译一次。虽然以前已也编译过，但是每个版本终究还是不同的，有坑需要踩的。 准备centos7.6环境。注意：该文章只使用于借鉴，没有使用于生产环境。慎重。 步骤 检查是否安装过 wget： 安装wget： 进入源码包的存放位置，没有就创建一个，例如： 准备好Apache的源码包分别执行： 安装LAMP的依赖包，执行命令： 开始编译安装Apache，apache版本-&gt;httpd-2.4.43 依赖包版本-&gt; pcre-8.42 apr-1.7.0 apr-util-1.6.1。 源码安装 apr-1.7.0.tar.gz： 源码安装 apr-util-1.6.1.tar.gz: 源码安装pcre-8.42.tar.gz: 源码安装httpd-2.4.43.tar.gz： 到这里Apache就安装完了，现在开始配置Apache： 编辑httpd.conf文件（Apache配置文件）操作点： （Apache配置文件）修改点： #ServerName www.example.com:80 修改成 ServerName localhost:80 注意要去掉注释# DocumentRoot “&#x2F;usr&#x2F;local&#x2F;apache2&#x2F;htdocs” 修改成 DocumentRoot “&#x2F;www” 注意：www是小写 &lt;Directory “&#x2F;usr&#x2F;local&#x2F;apache2&#x2F;htdocs”&gt; 修改成 &lt;Directory “&#x2F;www”&gt; 注意：www是小写 DirectoryIndex index.html 修改成 DirectoryIndex index.php index.html #Include conf&#x2F;extra&#x2F;httpd-vhosts.conf 修改成 Include conf&#x2F;extra&#x2F;httpd-vhosts.conf 编辑完httpd.conf文件，接着编辑httpd-vhosts.conf文件（虚拟主机配置）执行以下操作： 编辑httpd-vhosts.conf: 删除以下的配置: 新增配置: 到这里Apache总体配置完了。 以下是Apache的启动，停止，重启的命令： 总结 编译过程中遇到问题莫慌，百度一下其实有很多例子和解决方案，虽然有很多标题党和广告但是自己也要能分辨出有效信息。 为了保证文章的是否有错误的语句，写完之后，按照自己的写文章再搭建了一次，确保没有问题的出现。 "},{"title":"Apache自带的ab压力测试工具使用","date":"2023-09-04T16:00:00.000Z","url":"/liaoblog/2023/09/05/%E6%9D%82%E9%A1%B9/Apache%E8%87%AA%E5%B8%A6%E7%9A%84ab%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/","tags":[["apache","/liaoblog/tags/apache/"],["ab","/liaoblog/tags/ab/"]],"categories":[["杂项","/liaoblog/categories/%E6%9D%82%E9%A1%B9/"]],"content":"Apache自带的ab压力测试工具使用步骤 ab是Apache自带的压力测试工具，用于测试站点的承受能力，原名Apache Bench。 ab的原理是：创建多个并发进程，模拟多个用户同时对同一个目标网址发起访问。 使用方式，找到Apache的安装目录，有个bin文件夹，里面有一个ab.exe文件。比如我使用的phpstudy8.0。 在windows的命令行下(cmd)运行ab.exe，注意:直接双击ab.exe是无效的。 先打开cmd,比如以下快捷进入。 运行以下命令： 会出现如下的帮助界面： 红框中的是 ab的使用格式，例如(注意链接一定要&#x2F;结尾)： ab常用参数说明： -n ：总共的请求执行数； -c： 并发数，缺省是1； -t：测试所进行的总时间，秒为单位 -p：POST时的数据 -w: 以HTML表的格式输出结果 ab测试例子： ![这是图片](../../images/article/miscellaneous/ab-5.png ) ![这是图片](../../images/article/miscellaneous/ab-6.png ) ab测试的性能指标: 吞吐率（Requests per second）。概念：服务器并发处理能力的量化描述，单位是reqs&#x2F;s，指的是在某个并发用户数下单位时间内处理的请求数。某个并发用户数下单位时间内能处理的最大请求数，称之为最大吞吐率。注意：吞吐率是基于并发用户数的，跟随用户数变化，数值表示当前机器的整体性能，值越大越好。 并发用户数（Concurrency Level）。 用户平均请求等待时间（Time per request）。用户等待时间参考2&#x2F;5&#x2F;8原则。 注意 注意测试服务器的时候要适量，ab会给测试对象带来压力，宕机别赖我啊。 "}]